//buildscript {
//	dependencies {
//		classpath('se.transmode.gradle:gradle-docker:1.2')
//	}
//}

plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
}

group = 'com.yapp18'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'junit:junit'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.mockito:mockito-core'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.3'

	// redis
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.3.12.RELEASE'

	//oauth2, security, jwt
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // 권한 관련
	testImplementation 'org.springframework.security:spring-security-test'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	// JWT
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// mapstruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // builder 패턴 사용에 필요
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	// db
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// s3
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'

	// jpa
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-core'

	// swagger
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'io.swagger:swagger-annotations:1.5.21'
	implementation 'io.swagger:swagger-models:1.5.21'

	//logging
	implementation 'org.apache.logging.log4j:log4j-core'
	implementation 'org.slf4j:slf4j-api'

	// test
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.dbunit:dbunit:2.6.0'
	testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

test {
	useJUnitPlatform()
}

//apply plugin: 'docker'
//
//task buildDocker(type: Docker, dependsOn: build) {
//	// push = true
//	applicationName = jar.baseName
//	dockerfile = file('/Dockerfile')
//	doFirst {
//		copy {
//			from jar
//			into stageDir
//		}
//	}
//}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
task stage(dependsOn: ['build', 'clean'])
stage.mustRunAfter clean
